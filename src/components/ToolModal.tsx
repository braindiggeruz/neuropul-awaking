import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Loader2, Copy, Download, RefreshCw, Lightbulb, Wand2, Star, Zap, Eye, BookOpen } from 'lucide-react';
import { AITool } from '../types';
import { askOpenAI, generateMemeImage, getToolPrompt, getToolResultTitle, improvePrompt, getPromptSuggestions } from '../utils/openaiService';
import { playSound, vibrate } from '../utils/sounds';

interface ToolModalProps {
  tool: AITool;
  isOpen: boolean;
  onClose: () => void;
  onToolUsed: (toolId: string, xpReward: number) => void;
  language: 'ru' | 'uz';
  soundEnabled: boolean;
  vibrationEnabled: boolean;
}

const ToolModal: React.FC<ToolModalProps> = ({
  tool,
  isOpen,
  onClose,
  onToolUsed,
  language,
  soundEnabled,
  vibrationEnabled
}) => {
  const [input, setInput] = useState('');
  const [result, setResult] = useState('');
  const [imageUrl, setImageUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [hasUsedTool, setHasUsedTool] = useState(false);
  const [showPromptHelper, setShowPromptHelper] = useState(false);
  const [promptSuggestions, setPromptSuggestions] = useState<string[]>([]);
  const [promptQuality, setPromptQuality] = useState<'basic' | 'good' | 'excellent'>('basic');
  const [mentorTip, setMentorTip] = useState('');
  const [generationHistory, setGenerationHistory] = useState<Array<{prompt: string, result: string, imageUrl?: string, rating?: number}>>([]);
  const [currentRating, setCurrentRating] = useState(0);
  const [showAdvancedMode, setShowAdvancedMode] = useState(false);
  
  // Ref to prevent multiple AI calls
  const hasCompletedAIRef = useRef(false);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (isOpen) {
      console.log(`[ToolModal] Opening enhanced tool: ${tool.id}`);
      setInput('');
      setResult('');
      setImageUrl('');
      setError('');
      setIsLoading(false);
      setHasUsedTool(false);
      setShowPromptHelper(false);
      setMentorTip('');
      setCurrentRating(0);
      hasCompletedAIRef.current = false;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      if (tool.id === 'meme-generator' || tool.id === 'image-analyzer') {
        loadPromptSuggestions();
      }
    }
  }, [isOpen, tool.id]);

  // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (input.length > 0) {
      analyzePromptQuality(input);
    }
  }, [input]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
  const loadPromptSuggestions = () => {
    const suggestions = getPromptSuggestions(tool.id);
    setPromptSuggestions(suggestions);
  };

  // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞
  const analyzePromptQuality = (prompt: string) => {
    const words = prompt.split(' ').length;
    const hasStyle = /—Å—Ç–∏–ª—å|style|–∫–∏–±–µ—Ä–ø–∞–Ω–∫|–≤–∏–Ω—Ç–∞–∂|–º–∏–Ω–∏–º–∞–ª–∏–∑–º|—Ä–µ–∞–ª–∏–∑–º/i.test(prompt);
    const hasEmotion = /–≥—Ä—É—Å—Ç–Ω—ã–π|–≤–µ—Å–µ–ª—ã–π|–∑–ª–æ–π|—Ä–∞–¥–æ—Å—Ç–Ω—ã–π|–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π|—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π/i.test(prompt);
    const hasDetails = /–¥–µ—Ç–∞–ª—å–Ω—ã–π|–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ|4k|hd|–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π/i.test(prompt);
    
    if (words >= 8 && hasStyle && hasEmotion) {
      setPromptQuality('excellent');
      setMentorTip('üé® –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç! –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç–∏–ª—å, —ç–º–æ—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª–∏ - —ç—Ç–æ –¥–∞—Å—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!');
    } else if (words >= 5 && (hasStyle || hasEmotion)) {
      setPromptQuality('good');
      setMentorTip('üëç –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–º–ø—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ —ç–º–æ—Ü–∏–π –¥–ª—è –µ—â–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
    } else {
      setPromptQuality('basic');
      setMentorTip('üí° –°–æ–≤–µ—Ç: –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫"), —ç–º–æ—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!');
    }
  };

  // –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
  const handleImprovePrompt = async () => {
    if (!input.trim()) return;
    
    setIsLoading(true);
    try {
      const improvedPrompt = await improvePrompt(input, tool.id);
      if (improvedPrompt.success) {
        setInput(improvedPrompt.content);
        setMentorTip('‚ú® –ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω! –¢–µ–ø–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ.');
        playSound('success', soundEnabled);
      }
    } catch (err) {
      console.error('Error improving prompt:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
  const handleClose = () => {
    console.log(`[ToolModal] Closing enhanced tool: ${tool.id}`);
    playSound('click', soundEnabled);
    // Reset AI state
    hasCompletedAIRef.current = false;
    onClose();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
  const handleUseTools = async () => {
    if (!input.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      playSound('error', soundEnabled);
      return;
    }
    
    // Guard against multiple calls
    if (hasCompletedAIRef.current) return;
    hasCompletedAIRef.current = true;

    console.log(`[ToolModal] Using enhanced tool ${tool.id} with input: "${input}"`);
    
    setIsLoading(true);
    setError('');
    setResult('');
    setImageUrl('');

    try {
      if (tool.id === 'meme-generator') {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        const enhancedPrompt = `${input}, meme style, funny, high quality, clear text areas, vibrant colors, professional meme format`;
        const response = await generateMemeImage(enhancedPrompt);
        
        if (response.success && response.imageUrl) {
          setImageUrl(response.imageUrl);
          setResult(`üé® –ú–µ–º —Å–æ–∑–¥–∞–Ω! –¢–µ–º–∞: "${input}"`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          setGenerationHistory(prev => [...prev, {
            prompt: input,
            result: `–ú–µ–º –Ω–∞ —Ç–µ–º—É "${input}"`,
            imageUrl: response.imageUrl
          }]);
          
          // –û–±—É—á–∞—é—â–∏–π —Å–æ–≤–µ—Ç –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          setTimeout(() => {
            setMentorTip('üéØ –°–æ–≤–µ—Ç: –î–ª—è –µ—â–µ –ª—É—á—à–∏—Ö –º–µ–º–æ–≤ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —ç–º–æ—Ü–∏—é, —Å–∏—Ç—É–∞—Ü–∏—é –∏ —Å—Ç–∏–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —É—Ç—Ä–æ–º –±–µ–∑ –∫–æ—Ñ–µ, –≥—Ä—É—Å—Ç–Ω—ã–π, –≤ —Å—Ç–∏–ª–µ —Ä–µ—Ç—Ä–æ"');
          }, 2000);
          
          if (!hasUsedTool) {
            const bonusXP = promptQuality === 'excellent' ? tool.xpReward + 10 : 
                           promptQuality === 'good' ? tool.xpReward + 5 : tool.xpReward;
            onToolUsed(tool.id, bonusXP);
            setHasUsedTool(true);
          }
          
          playSound('success', soundEnabled);
          vibrate([100, 50, 100], vibrationEnabled);
        } else {
          throw new Error(response.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
      } else {
        // –û–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        const prompt = getToolPrompt(tool.id, input);
        const response = await askOpenAI(prompt);
        
        if (response.success) {
          setResult(response.content);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          setGenerationHistory(prev => [...prev, {
            prompt: input,
            result: response.content
          }]);
          
          if (!hasUsedTool) {
            const bonusXP = promptQuality === 'excellent' ? tool.xpReward + 10 : 
                           promptQuality === 'good' ? tool.xpReward + 5 : tool.xpReward;
            onToolUsed(tool.id, bonusXP);
            setHasUsedTool(true);
          }
          
          playSound('success', soundEnabled);
          vibrate([100, 50, 100], vibrationEnabled);
        } else {
          throw new Error(response.error || '–û—à–∏–±–∫–∞ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏');
        }
      }
    } catch (err) {
      console.error(`[ToolModal] Error using enhanced tool ${tool.id}:`, err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setMentorTip('üîß –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏.');
      playSound('error', soundEnabled);
      vibrate([200], vibrationEnabled);
      // Reset AI completion flag to allow retry
      hasCompletedAIRef.current = false;
    } finally {
      setIsLoading(false);
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const handleCopyResult = async () => {
    try {
      await navigator.clipboard.writeText(result);
      playSound('success', soundEnabled);
      setMentorTip('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≥–¥–µ —É–≥–æ–¥–Ω–æ.');
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleDownloadImage = () => {
    if (imageUrl) {
      const link = document.createElement('a');
      link.href = imageUrl;
      link.download = `neuropul_${tool.id}_${Date.now()}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      playSound('success', soundEnabled);
      setMentorTip('üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —Ç–≤–æ—Ä–µ–Ω–∏—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏.');
    }
  };

  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  const handleRegenerate = () => {
    if (input.trim()) {
      setMentorTip('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ! –ö–∞–∂–¥—ã–π —Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º.');
      // Reset AI completion flag to allow regeneration
      hasCompletedAIRef.current = false;
      handleUseTools();
    }
  };

  // –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const handleRateResult = (rating: number) => {
    setCurrentRating(rating);
    if (rating >= 4) {
      setMentorTip('‚≠ê –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º!');
    } else if (rating >= 2) {
      setMentorTip('üëç –ù–µ–ø–ª–æ—Ö–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –µ—â–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
    } else {
      setMentorTip('üí™ –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç.');
    }
    playSound('click', soundEnabled);
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const applySuggestion = (suggestion: string) => {
    setInput(suggestion);
    setMentorTip('‚ú® –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –≠—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –¥–∞—Å—Ç —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.');
    playSound('click', soundEnabled);
  };

  // Reset AI state
  const resetAI = () => {
    hasCompletedAIRef.current = false;
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        onClick={handleClose}
      >
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 20 }}
          className="bg-gradient-to-br from-gray-900 to-purple-900 rounded-2xl p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto border border-white border-opacity-20"
          onClick={(e) => e.stopPropagation()}
        >
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-3">
              <div className="text-3xl">{tool.icon}</div>
              <div>
                <h2 className="text-xl font-bold text-white">
                  {tool.name[language]}
                </h2>
                <p className="text-purple-200 text-sm">
                  {tool.description[language]}
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowAdvancedMode(!showAdvancedMode)}
                className="text-purple-300 hover:text-white transition-colors p-2 hover:bg-white hover:bg-opacity-10 rounded-lg"
                title="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"
              >
                <BookOpen className="w-5 h-5" />
              </button>
              <button
                onClick={handleClose}
                className="text-gray-400 hover:text-white transition-colors p-2 hover:bg-white hover:bg-opacity-10 rounded-lg"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Main Input Section */}
            <div className="lg:col-span-2 space-y-4">
              {/* Input Section */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="block text-white font-semibold">
                    {tool.id === 'image-analyzer' ? '–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é:' :
                     tool.id === 'code-assistant' ? '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É:' :
                     tool.id === 'meme-generator' ? '–¢–µ–º–∞ –¥–ª—è –º–µ–º–∞:' :
                     tool.id === 'mvp-generator' ? '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –ø—Ä–æ–¥—É–∫—Ç–∞:' :
                     '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:'}
                  </label>
                  <div className="flex items-center space-x-2">
                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞ */}
                    <div className={`px-2 py-1 rounded-full text-xs font-semibold ${
                      promptQuality === 'excellent' ? 'bg-green-500 text-white' :
                      promptQuality === 'good' ? 'bg-yellow-500 text-black' :
                      'bg-gray-500 text-white'
                    }`}>
                      {promptQuality === 'excellent' ? 'üåü –û—Ç–ª–∏—á–Ω–æ' :
                       promptQuality === 'good' ? 'üëç –•–æ—Ä–æ—à–æ' : 'üí° –ë–∞–∑–æ–≤—ã–π'}
                    </div>
                    <button
                      onClick={handleImprovePrompt}
                      disabled={!input.trim() || isLoading}
                      className="text-purple-300 hover:text-white transition-colors p-1 hover:bg-white hover:bg-opacity-10 rounded"
                      title="–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò"
                    >
                      <Wand2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
                
                <textarea
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder={
                    tool.id === 'idea-generator' ? '–ù–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ—á—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö' :
                    tool.id === 'image-analyzer' ? '–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–Ω–æ –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º...' :
                    tool.id === 'code-assistant' ? '–ù–∞–ø—Ä–∏–º–µ—Ä: function calculateSum(a, b) { return a + b; }' :
                    tool.id === 'meme-generator' ? '–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –∏ –∫–æ—Ñ–µ —É—Ç—Ä–æ–º, –≥—Ä—É—Å—Ç–Ω–æ-—Å–º–µ—à–Ω–æ' :
                    tool.id === 'mvp-generator' ? '–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ —Å AI' :
                    '–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ...'
                  }
                  className="w-full h-32 px-4 py-3 bg-white bg-opacity-10 border border-white border-opacity-20 rounded-lg text-white placeholder-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500 resize-none"
                  disabled={isLoading}
                />
                <div className="flex justify-between items-center text-xs text-purple-300 mt-1">
                  <span>{input.length}/1000</span>
                  <button
                    onClick={() => setShowPromptHelper(!showPromptHelper)}
                    className="flex items-center space-x-1 hover:text-white transition-colors"
                  >
                    <Lightbulb className="w-3 h-3" />
                    <span>–ü–æ–¥—Å–∫–∞–∑–∫–∏</span>
                  </button>
                </div>
              </div>

              {/* Mentor Tip */}
              {mentorTip && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="p-3 bg-blue-500 bg-opacity-20 border border-blue-500 border-opacity-30 rounded-lg text-blue-300 text-sm"
                >
                  <div className="flex items-start space-x-2">
                    <span className="text-lg">üßô‚Äç‚ôÇÔ∏è</span>
                    <div>
                      <div className="font-semibold mb-1">AI-–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</div>
                      <div>{mentorTip}</div>
                    </div>
                  </div>
                </motion.div>
              )}

              {/* Error */}
              {error && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="p-3 bg-red-500 bg-opacity-20 border border-red-500 border-opacity-30 rounded-lg text-red-400 text-sm"
                >
                  ‚ö†Ô∏è {error}
                </motion.div>
              )}

              {/* Action Buttons */}
              <div className="flex space-x-3">
                <button
                  onClick={handleUseTools}
                  disabled={isLoading || !input.trim()}
                  className={`flex-1 py-3 rounded-lg font-semibold transition-all duration-300 ${
                    isLoading || !input.trim()
                      ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                      : 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 transform hover:scale-105'
                  }`}
                >
                  {isLoading ? (
                    <div className="flex items-center justify-center space-x-2">
                      <Loader2 className="w-5 h-5 animate-spin" />
                      <span>ü§ñ AI —Å–æ–∑–¥–∞–µ—Ç...</span>
                    </div>
                  ) : (
                    <div className="flex items-center justify-center space-x-2">
                      <span>{tool.icon}</span>
                      <span>–°–æ–∑–¥–∞—Ç—å</span>
                      <span className="text-xs bg-white bg-opacity-20 px-2 py-1 rounded">
                        +{promptQuality === 'excellent' ? tool.xpReward + 10 : 
                          promptQuality === 'good' ? tool.xpReward + 5 : tool.xpReward} XP
                      </span>
                    </div>
                  )}
                </button>

                {(result || imageUrl) && (
                  <button
                    onClick={handleRegenerate}
                    className="px-4 py-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
                    title="–°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
                  >
                    <RefreshCw className="w-5 h-5" />
                  </button>
                )}
              </div>
            </div>

            {/* Sidebar */}
            <div className="space-y-4">
              {/* Prompt Suggestions */}
              {showPromptHelper && promptSuggestions.length > 0 && (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="bg-white bg-opacity-5 rounded-lg p-4 border border-white border-opacity-10"
                >
                  <h4 className="text-white font-semibold mb-3 flex items-center">
                    <Lightbulb className="w-4 h-4 mr-2" />
                    –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤
                  </h4>
                  <div className="space-y-2">
                    {promptSuggestions.slice(0, 3).map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => applySuggestion(suggestion)}
                        className="w-full text-left p-2 text-sm text-purple-200 hover:text-white hover:bg-white hover:bg-opacity-10 rounded transition-colors"
                      >
                        üí° {suggestion}
                      </button>
                    ))}
                  </div>
                </motion.div>
              )}

              {/* Advanced Mode */}
              {showAdvancedMode && (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="bg-white bg-opacity-5 rounded-lg p-4 border border-white border-opacity-10"
                >
                  <h4 className="text-white font-semibold mb-3 flex items-center">
                    <BookOpen className="w-4 h-4 mr-2" />
                    –û–±—É—á–µ–Ω–∏–µ
                  </h4>
                  <div className="space-y-3 text-sm text-purple-200">
                    <div>
                      <div className="font-semibold text-white mb-1">üéØ –°–µ–∫—Ä–µ—Ç—ã —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:</div>
                      <ul className="space-y-1 text-xs">
                        <li>‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —ç–º–æ—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</li>
                        <li>‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∏–ª—å (–≤–∏–Ω—Ç–∞–∂, –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –º–∏–Ω–∏–º–∞–ª–∏–∑–º)</li>
                        <li>‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é</li>
                        <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (HD, 4K)</li>
                      </ul>
                    </div>
                    <div>
                      <div className="font-semibold text-white mb-1">‚ö° –ë–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ:</div>
                      <ul className="space-y-1 text-xs">
                        <li>‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {tool.xpReward} XP</li>
                        <li>‚Ä¢ –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–º–ø—Ç: +5 XP</li>
                        <li>‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç: +10 XP</li>
                      </ul>
                    </div>
                  </div>
                </motion.div>
              )}

              {/* Generation History */}
              {generationHistory.length > 0 && (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="bg-white bg-opacity-5 rounded-lg p-4 border border-white border-opacity-10"
                >
                  <h4 className="text-white font-semibold mb-3 flex items-center">
                    <Eye className="w-4 h-4 mr-2" />
                    –ò—Å—Ç–æ—Ä–∏—è ({generationHistory.length})
                  </h4>
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {generationHistory.slice(-3).reverse().map((item, index) => (
                      <div key={index} className="text-xs text-purple-200 p-2 bg-white bg-opacity-5 rounded">
                        <div className="font-semibold truncate">"{item.prompt}"</div>
                        <div className="text-gray-400 mt-1">
                          {item.imageUrl ? 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : 'üìù –¢–µ–∫—Å—Ç'}
                        </div>
                      </div>
                    ))}
                  </div>
                </motion.div>
              )}
            </div>
          </div>

          {/* Results Section */}
          {(result || imageUrl) && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-6 bg-white bg-opacity-5 rounded-lg p-4 border border-white border-opacity-10"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-white font-semibold">
                  {getToolResultTitle(tool.id)}
                </h3>
                <div className="flex items-center space-x-2">
                  {/* Rating */}
                  <div className="flex items-center space-x-1">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <button
                        key={star}
                        onClick={() => handleRateResult(star)}
                        className={`transition-colors ${
                          star <= currentRating ? 'text-yellow-400' : 'text-gray-500'
                        }`}
                      >
                        <Star className="w-4 h-4" />
                      </button>
                    ))}
                  </div>
                  
                  {result && (
                    <button
                      onClick={handleCopyResult}
                      className="text-purple-300 hover:text-white transition-colors p-2 hover:bg-white hover:bg-opacity-10 rounded"
                      title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                    >
                      <Copy className="w-4 h-4" />
                    </button>
                  )}
                  {imageUrl && (
                    <button
                      onClick={handleDownloadImage}
                      className="text-purple-300 hover:text-white transition-colors p-2 hover:bg-white hover:bg-opacity-10 rounded"
                      title="–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                    >
                      <Download className="w-4 h-4" />
                    </button>
                  )}
                </div>
              </div>

              {/* Text Result */}
              {result && (
                <div className="text-purple-100 whitespace-pre-wrap text-sm leading-relaxed mb-4">
                  {result}
                </div>
              )}

              {/* Image Result */}
              {imageUrl && (
                <div className="text-center">
                  <img
                    src={imageUrl}
                    alt="Generated content"
                    className="max-w-full max-h-96 mx-auto rounded-lg shadow-lg"
                    onError={() => {
                      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                      setImageUrl('');
                    }}
                  />
                </div>
              )}

              {/* Success indicator */}
              {hasUsedTool && (
                <div className="mt-4 text-center">
                  <div className="inline-flex items-center space-x-2 bg-green-500 bg-opacity-20 px-4 py-2 rounded-full">
                    <Zap className="w-4 h-4 text-green-400" />
                    <span className="text-green-400 font-semibold">
                      +{promptQuality === 'excellent' ? tool.xpReward + 10 : 
                        promptQuality === 'good' ? tool.xpReward + 5 : tool.xpReward} XP –ø–æ–ª—É—á–µ–Ω–æ!
                    </span>
                    {promptQuality === 'excellent' && (
                      <span className="text-yellow-400 text-sm">üåü –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ!</span>
                    )}
                  </div>
                </div>
              )}
            </motion.div>
          )}

          {/* Footer Tips */}
          <div className="mt-6 text-center text-xs text-purple-300">
            üí° –°–æ–≤–µ—Ç: –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏. –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É!
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
};

export default ToolModal;