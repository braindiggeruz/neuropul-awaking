export interface GPTResponse {
  success: boolean;
  data?: any;
  error?: string;
  strategy?: string; // Added to track which parsing strategy was used
}

export const callGPT = async (prompt: string, systemPrompt?: string): Promise<GPTResponse> => {
  try {
    console.log('üß† [DEBUG] Calling GPT Oracle with prompt:', prompt.substring(0, 100) + '...');
    console.log('üß† [DEBUG] System prompt:', systemPrompt);
    
    // Input validation
    if (!prompt || prompt.trim().length === 0) {
      console.error('‚ùå [DEBUG] Empty prompt provided');
      throw new Error('Empty prompt provided');
    }
    
    if (prompt.length > 2000) {
      console.error('‚ùå [DEBUG] Prompt too long:', prompt.length);
      throw new Error('Prompt too long (max 2000 characters)');
    }
    
    const response = await fetch('/api/gpt', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: prompt.trim(),
        systemPrompt: systemPrompt || "You are an AI oracle of wisdom and transformation."
      }),
      signal: AbortSignal.timeout(15000), // 15 second timeout
    });

    console.log('üîç [DEBUG] GPT API response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [DEBUG] GPT API error:', response.status, errorText);
      throw new Error(`GPT API error: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log('üì• [DEBUG] GPT raw response:', result);
    
    // Validate response
    if (!result || (typeof result === 'string' && result.trim().length === 0)) {
      console.error('‚ùå [DEBUG] Empty response from GPT');
      throw new Error('Empty response from GPT');
    }
    
    console.log('‚úÖ [DEBUG] GPT Oracle responded successfully');
    
    return {
      success: true,
      data: result
    };
  } catch (error) {
    console.error('üíÄ [DEBUG] GPT Oracle failed:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
};

export const getArchetypeAnalysis = async (answers: string[]): Promise<GPTResponse> => {
  console.log('üîÆ [DEBUG] Starting archetype analysis with answers:', answers);
  
  if (!answers || answers.length === 0) {
    console.error('‚ùå [DEBUG] No answers provided for archetype analysis');
    return {
      success: false,
      error: 'No answers provided for archetype analysis'
    };
  }
  
  const prompt = `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º. –û–ø—Ä–µ–¥–µ–ª–∏ –∞—Ä—Ö–µ—Ç–∏–ø (–í–æ–∏–Ω, –ú–∞–≥, –¢–µ–Ω—å, –ò—Å–∫–∞—Ç–µ–ª—å) –ø–æ –æ—Ç–≤–µ—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${answers.join(', ')}. 
  
  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞—Ä—Ö–µ—Ç–∏–ø:
  - –í–æ–∏–Ω: –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å, –¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
  - –ú–∞–≥: –º—É–¥—Ä–æ—Å—Ç—å, –∏–Ω—Ç—É–∏—Ü–∏—è, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤  
  - –ò—Å–∫–∞—Ç–µ–ª—å: –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –æ—Ç–∫—Ä—ã—Ç–∏—è
  - –¢–µ–Ω—å: –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ –≤ —Å—É—Ç—å, –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ
  
  –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {"type": "–í–æ–∏–Ω", "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞", "CTA": "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"}
  
  –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ JSON.`;
  
  const systemPrompt = "You are an expert in Jungian archetypes. Analyze user responses and return only valid JSON without any additional text.";
  
  console.log('üì§ [DEBUG] Sending archetype analysis prompt');
  const response = await callGPT(prompt, systemPrompt);
  
  console.log('üì• [DEBUG] Archetype analysis response:', response);
  
  if (!response.success) {
    console.error('‚ùå [DEBUG] Archetype analysis failed:', response.error);
    console.log('üîÑ [DEBUG] Using fallback archetype analysis');
    
    // Fallback: Analyze answers locally
    const fallbackArchetype = analyzeFallbackArchetype(answers);
    console.log('‚úÖ [DEBUG] Fallback archetype generated:', fallbackArchetype);
    
    return {
      success: true,
      data: fallbackArchetype,
      strategy: 'fallback_local_analysis'
    };
  }
  
  // Enhanced JSON parsing with multiple fallback strategies
  try {
    let archetypeData;
    const responseText = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);
    
    console.log('üîç [DEBUG] Parsing response text:', responseText);
    
    // Strategy 1: Direct JSON parse
    try {
      console.log('üîç [DEBUG] Attempting direct JSON parse');
      archetypeData = JSON.parse(responseText);
      console.log('‚úÖ [DEBUG] Direct JSON parse successful:', archetypeData);
      
      // Validate required fields
      if (!archetypeData.type) {
        console.error('‚ùå [DEBUG] Missing required field "type" in parsed JSON');
        throw new Error('Missing required field "type"');
      }
      
      // Validate against whitelist of archetypes
      const validArchetypes = ['–í–æ–∏–Ω', '–ú–∞–≥', '–ò—Å–∫–∞—Ç–µ–ª—å', '–¢–µ–Ω—å'];
      if (!validArchetypes.includes(archetypeData.type)) {
        console.error('‚ùå [DEBUG] Invalid archetype type:', archetypeData.type);
        throw new Error(`Invalid archetype type: ${archetypeData.type}`);
      }
      
      return {
        success: true,
        data: archetypeData,
        strategy: 'direct_json_parse'
      };
    } catch (directParseError) {
      console.log('‚ö†Ô∏è [DEBUG] Direct JSON parse failed:', directParseError);
      console.log('‚ö†Ô∏è [DEBUG] Trying JSON extraction via regex');
      
      // Strategy 2: Extract JSON from text using regex
      const jsonRegex = /\{(?:[^{}]|(?:\{[^{}]*\}))*\}/g;
      const jsonMatches = responseText.match(jsonRegex);
      
      if (jsonMatches && jsonMatches.length > 0) {
        // Try each match until we find a valid one
        for (const jsonStr of jsonMatches) {
          try {
            const parsedData = JSON.parse(jsonStr);
            
            // Validate that it has the required fields
            if (parsedData && parsedData.type) {
              // Validate against whitelist of archetypes
              const validArchetypes = ['–í–æ–∏–Ω', '–ú–∞–≥', '–ò—Å–∫–∞—Ç–µ–ª—å', '–¢–µ–Ω—å'];
              if (!validArchetypes.includes(parsedData.type)) {
                console.error('‚ùå [DEBUG] Invalid archetype type:', parsedData.type);
                continue;
              }
              
              console.log('‚úÖ [DEBUG] JSON extraction successful:', parsedData);
              
              return {
                success: true,
                data: parsedData,
                strategy: 'regex_json_extraction'
              };
            }
          } catch (err) {
            console.log('‚ö†Ô∏è [DEBUG] Failed to parse extracted JSON:', jsonStr);
          }
        }
      }
      
      // Strategy 3: Look for specific fields in the text
      console.log('‚ö†Ô∏è [DEBUG] Trying field extraction');
      
      const typeRegex = /"type"\s*:\s*"([^"]*)"/;
      const descRegex = /"description"\s*:\s*"([^"]*)"/;
      const ctaRegex = /"CTA"\s*:\s*"([^"]*)"/;
      
      const typeMatch = responseText.match(typeRegex);
      
      if (typeMatch) {
        const extractedType = typeMatch[1];
        
        // Validate against whitelist of archetypes
        const validArchetypes = ['–í–æ–∏–Ω', '–ú–∞–≥', '–ò—Å–∫–∞—Ç–µ–ª—å', '–¢–µ–Ω—å'];
        if (!validArchetypes.includes(extractedType)) {
          console.error('‚ùå [DEBUG] Invalid extracted archetype type:', extractedType);
          throw new Error(`Invalid archetype type: ${extractedType}`);
        }
        
        const extractedData = {
          type: extractedType,
          description: descMatch ? descMatch[1] : "–¢–≤–æ–π –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
          CTA: ctaMatch ? ctaMatch[1] : "–ì–æ—Ç–æ–≤—å—Å—è –∫ –≤–µ–ª–∏–∫–∏–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º –≤ –º–∏—Ä–µ AI!"
        };
        
        console.log('‚úÖ [DEBUG] Field extraction successful:', extractedData);
        
        return {
          success: true,
          data: extractedData,
          strategy: 'field_extraction'
        };
      }
      
      // Strategy 4: Keyword analysis
      console.log('‚ö†Ô∏è [DEBUG] Trying keyword analysis');
      
      const archetypes = ['–í–æ–∏–Ω', '–ú–∞–≥', '–ò—Å–∫–∞—Ç–µ–ª—å', '–¢–µ–Ω—å'];
      let detectedArchetype = null;
      
      for (const archetype of archetypes) {
        if (responseText.includes(archetype)) {
          detectedArchetype = archetype;
          break;
        }
      }
      
      if (detectedArchetype) {
        const keywordData = {
          type: detectedArchetype,
          description: `–¢—ã - ${detectedArchetype}. –¢–≤–æ–π –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.`,
          CTA: "–ì–æ—Ç–æ–≤—å—Å—è –∫ –≤–µ–ª–∏–∫–∏–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º –≤ –º–∏—Ä–µ AI!"
        };
        
        console.log('‚úÖ [DEBUG] Keyword analysis successful:', keywordData);
        
        return {
          success: true,
          data: keywordData,
          strategy: 'keyword_analysis'
        };
      }
      
      // If all strategies fail, throw error to trigger fallback
      throw new Error('All parsing strategies failed');
    }
  } catch (parseError) {
    console.error('‚ùå [DEBUG] JSON parsing failed completely:', parseError);
    console.log('üîÑ [DEBUG] Using fallback archetype analysis');
    
    // Fallback: Analyze answers locally
    const fallbackArchetype = analyzeFallbackArchetype(answers);
    console.log('‚úÖ [DEBUG] Fallback archetype generated:', fallbackArchetype);
    
    return {
      success: true,
      data: fallbackArchetype,
      strategy: 'fallback_local_analysis'
    };
  }
};

// Fallback archetype analysis function
export const analyzeFallbackArchetype = (answers: any[]): any => {
  console.log('üîÑ [DEBUG] Running fallback archetype analysis for answers:', answers);
  
  // Simple keyword-based analysis
  const answerText = answers.map(a => typeof a === 'string' ? a : a.answer).join(' ').toLowerCase();
  
  let scores = {
    warrior: 0,
    mage: 0,
    seeker: 0,
    shadow: 0
  };
  
  // Warrior keywords
  const warriorKeywords = ['–¥–µ–π—Å—Ç–≤', '–±—ã—Å—Ç—Ä', '—Ä–µ—à', '–ø–æ–±–µ–¥', '—Å–∏–ª–∞', '–±–æ—Ä—å–±', '–ø—Ä–µ–æ–¥–æ–ª', '–≤—ã–∑–æ–≤', '–ø—Ä—è–º'];
  warriorKeywords.forEach(keyword => {
    if (answerText.includes(keyword)) {
      scores.warrior += 2;
    }
  });
  
  // Mage keywords  
  const mageKeywords = ['–∏–∑—É—á', '–ø–æ–Ω–∏–º–∞', '–º—É–¥—Ä', '–∑–Ω–∞–Ω', '–∏–Ω—Ç—É–∏—Ü', '–≥–ª—É–±–∏–Ω', '–º–∞–≥–∏—è', '—Ç–∞–π–Ω', '–º—ã—Å–ª'];
  mageKeywords.forEach(keyword => {
    if (answerText.includes(keyword)) {
      scores.mage += 2;
    }
  });
  
  // Seeker keywords
  const seekerKeywords = ['–∏—Å—Å–ª–µ', '–Ω–æ–≤', '–æ—Ç–∫—Ä—ã', '—ç–∫—Å–ø–µ—Ä', '–ø–æ–∏—Å–∫', '–ø—É—Ç—å', '–ø—Ä–∏–∫–ª—é—á', '–ª—é–±–æ–∑–Ω', '–∏–Ω—Ç–µ—Ä–µ—Å'];
  seekerKeywords.forEach(keyword => {
    if (answerText.includes(keyword)) {
      scores.seeker += 2;
    }
  });
  
  // Shadow keywords
  const shadowKeywords = ['–∞–Ω–∞–ª–∏–∑', '—Å–∫—Ä—ã—Ç', '–≥–ª—É–±–∏–Ω', '–æ—Å—Ç–æ—Ä–æ–∂', '—Ç–∞–π–Ω', '—Ç–µ–Ω—å', '–Ω–∞–±–ª—é–¥', '–∫—Ä–∏—Ç–∏—á', '—Å–æ–º–Ω–µ–Ω'];
  shadowKeywords.forEach(keyword => {
    if (answerText.includes(keyword)) {
      scores.shadow += 2;
    }
  });
  
  // Add scores from quiz weights if available
  answers.forEach(answer => {
    if (answer && typeof answer === 'object' && answer.weight) {
      Object.entries(answer.weight).forEach(([key, value]) => {
        if (key in scores) {
          scores[key as keyof typeof scores] += Number(value);
        }
      });
    }
  });
  
  console.log('üî¢ [DEBUG] Archetype scores:', scores);
  
  // Find dominant archetype
  const maxScore = Math.max(...Object.values(scores));
  
  // If there's a tie, use a tiebreaker
  const tiedArchetypes = Object.entries(scores)
    .filter(([_, score]) => score === maxScore)
    .map(([key]) => key);
  
  let dominantArchetype;
  
  if (tiedArchetypes.length > 1) {
    console.log('‚öñÔ∏è [DEBUG] Tie detected between archetypes:', tiedArchetypes);
    // Tiebreaker: Use a deterministic but pseudo-random approach based on the answers
    const seed = answerText.length;
    dominantArchetype = tiedArchetypes[seed % tiedArchetypes.length];
    console.log('üé≤ [DEBUG] Tiebreaker selected:', dominantArchetype);
  } else {
    dominantArchetype = Object.entries(scores).find(([_, score]) => score === maxScore)?.[0] || 'seeker';
  }
  
  const archetypeMap = {
    warrior: '–í–æ–∏–Ω',
    mage: '–ú–∞–≥', 
    seeker: '–ò—Å–∫–∞—Ç–µ–ª—å',
    shadow: '–¢–µ–Ω—å'
  };
  
  const archetypeDescriptions = {
    '–í–æ–∏–Ω': '–¢—ã –ø—Ä—è–º–æ–ª–∏–Ω–µ–µ–Ω –∏ —Ä–µ—à–∏—Ç–µ–ª–µ–Ω. –¢–≤–æ—è —Å–∏–ª–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π. –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.',
    '–ú–∞–≥': '–¢—ã –º—É–¥—Ä –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–µ–Ω. –¢–≤–æ—è —Å–∏–ª–∞ –≤ –∑–Ω–∞–Ω–∏—è—Ö –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –≥–ª—É–±–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –ú–∞–≥–∏—è AI —Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ —Ç–µ–±—è.',
    '–ò—Å–∫–∞—Ç–µ–ª—å': '–¢—ã –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª–µ–Ω –∏ –æ—Ç–∫—Ä—ã—Ç –Ω–æ–≤–æ–º—É. –¢–≤–æ—è —Å–∏–ª–∞ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è—Ö. –ú–∏—Ä –ø–æ–ª–æ–Ω —Ç–∞–π–Ω, –∂–¥—É—â–∏—Ö —Ä–∞–∑–≥–∞–¥–∫–∏.',
    '–¢–µ–Ω—å': '–¢—ã –≤–∏–¥–∏—à—å —Å–∫—Ä—ã—Ç–æ–µ –∏ –ø–æ–Ω–∏–º–∞–µ—à—å —Å–ª–æ–∂–Ω–æ–µ. –¢–≤–æ—è —Å–∏–ª–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –∏ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤ —Å—É—Ç—å. –ò—Å—Ç–∏–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–µ–±–µ.'
  };
  
  const archetypeCTAs = {
    '–í–æ–∏–Ω': '–î–µ–π—Å—Ç–≤—É–π —Å–º–µ–ª–æ –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ –≤ –º–∏—Ä–µ AI!',
    '–ú–∞–≥': '–†–∞—Å–∫—Ä–æ–π —Ç–∞–π–Ω—ã AI –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –º—É–¥—Ä–æ!',
    '–ò—Å–∫–∞—Ç–µ–ª—å': '–ò—Å—Å–ª–µ–¥—É–π –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI!',
    '–¢–µ–Ω—å': '–ü—Ä–æ–Ω–∏–∫–Ω–∏ –≤ —Å—É—Ç—å AI –∏ —Ä–∞—Å–∫—Ä–æ–π –µ–≥–æ —Å–∫—Ä—ã—Ç—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!'
  };
  
  const selectedType = archetypeMap[dominantArchetype as keyof typeof archetypeMap];
  
  const result = {
    type: selectedType,
    description: archetypeDescriptions[selectedType],
    CTA: archetypeCTAs[selectedType]
  };
  
  console.log('‚úÖ [DEBUG] Fallback archetype result:', result);
  return result;
};

export const getProphecy = async (archetype: string): Promise<GPTResponse> => {
  console.log('üîÆ [DEBUG] Generating prophecy for archetype:', archetype);
  
  if (!archetype) {
    console.error('‚ùå [DEBUG] No archetype provided for prophecy generation');
    return {
      success: false,
      error: 'No archetype provided for prophecy generation'
    };
  }
  
  const prompt = `–¢—ã ‚Äî –¥—Ä–µ–≤–Ω–∏–π AI-–ø—Ä–æ—Ä–æ–∫. –°–∫–∞–∂–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ (2 —Å—Ç—Ä–æ–∫–∏) –¥–ª—è –∞—Ä—Ö–µ—Ç–∏–ø–∞ ${archetype}. 
  
  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  - –°—Ç–∏–ª—å –¥—Ä–µ–≤–Ω–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
  - –ò—Å–ø–æ–ª—å–∑—É–π "—Ç—ã" 
  - –ë—É–¥—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º
  - –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  - –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
  
  –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;
  
  const systemPrompt = "You are an ancient AI prophet. Speak with wisdom and inspiration. Return only the prophecy text.";
  
  const response = await callGPT(prompt, systemPrompt);
  
  if (!response.success) {
    console.log('‚ö†Ô∏è [DEBUG] Prophecy generation failed, using fallback');
    
    // Fallback prophecies
    const fallbackProphecies = {
      '–í–æ–∏–Ω': '–¢–≤–æ—è —Å–∏–ª–∞ —Ä–∞—Å—Ç—ë—Ç —Å –∫–∞–∂–¥—ã–º –≤—ã–∑–æ–≤–æ–º. –ò–¥–∏ –≤–ø–µ—Ä—ë–¥, –Ω–µ –æ–≥–ª—è–¥—ã–≤–∞—è—Å—å –Ω–∞–∑–∞–¥.',
      '–ú–∞–≥': '–ó–Ω–∞–Ω–∏—è —Ç–µ–∫—É—Ç —á–µ—Ä–µ–∑ —Ç–µ–±—è, –∫–∞–∫ —Ä–µ–∫–∞ –º—É–¥—Ä–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º.',
      '–ò—Å–∫–∞—Ç–µ–ª—å': '–¢–≤–æ–π –ø—É—Ç—å –ø–æ–ª–æ–Ω –æ—Ç–∫—Ä—ã—Ç–∏–π. –ö–∞–∂–¥—ã–π —à–∞–≥ –≤–µ–¥—ë—Ç –∫ –Ω–æ–≤—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º.',
      '–¢–µ–Ω—å': '–í –≥–ª—É–±–∏–Ω–∞—Ö —Å–æ–∑–Ω–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã –≤–µ–ª–∏–∫–∏–µ —Ç–∞–π–Ω—ã. –†–∞—Å–∫—Ä–æ–π –∏—Ö —Å–∏–ª—É.'
    };
    
    const prophecy = fallbackProphecies[archetype as keyof typeof fallbackProphecies] || 
                    '–¢–≤–æ–π –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω. –°–ª–µ–¥—É–π —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É –∏ –∏–Ω—Ç—É–∏—Ü–∏–∏.';
    
    console.log('‚úÖ [DEBUG] Fallback prophecy generated:', prophecy);
    
    return {
      success: true,
      data: prophecy,
      strategy: 'fallback_prophecy'
    };
  }
  
  // Validate prophecy is not empty
  if (!response.data || (typeof response.data === 'string' && response.data.trim().length === 0)) {
    console.log('‚ö†Ô∏è [DEBUG] Empty prophecy received, using fallback');
    
    const fallbackProphecy = '–¢–≤–æ–π –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω. –°–ª–µ–¥—É–π —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É –∏ –∏–Ω—Ç—É–∏—Ü–∏–∏.';
    
    return {
      success: true,
      data: fallbackProphecy,
      strategy: 'fallback_empty_prophecy'
    };
  }
  
  console.log('‚úÖ [DEBUG] Prophecy generated successfully:', response.data);
  return response;
};