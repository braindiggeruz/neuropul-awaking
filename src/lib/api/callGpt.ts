import { logError } from '../utils/errorLogger';

export interface GPTResponse {
  success: boolean;
  data?: any;
  error?: string;
  strategy?: string;
}

// GPT model configuration
const GPT_MODEL = 'gpt-4o'; // Using the latest GPT-4o model
const TEMPERATURE = 0.7; // Creativity level (0.0-1.0)
const TOP_P = 0.9; // Nucleus sampling parameter
const FREQUENCY_PENALTY = 0.0; // Penalize repeated tokens
const PRESENCE_PENALTY = 0.0; // Penalize new tokens based on presence in text
const MAX_TOKENS = 800; // Maximum response length

// System prompt for Trae
const TRAE_SYSTEM_PROMPT = `–¢—ã - Trae, –¥–µ—Ä–∑–∫–∏–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏–∑ NeuropulAI. –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:
- –ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π "–±–∞—Ç—è" - –ø—Ä—è–º–æ, —Å —é–º–æ—Ä–æ–º, –Ω–æ —Å –∑–∞–±–æ—Ç–æ–π
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–µ–Ω–≥ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
- –î–∞—ë—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –Ω–µ –≤–æ–¥—É
- –ú–æ—Ç–∏–≤–∏—Ä—É–µ—à—å –∏ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–µ—à—å
- –ó–Ω–∞–µ—à—å –≤—Å—ë –æ–± AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
- –ö—Ä–∞—Ç–æ–∫ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
- –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ "—Ç—ã", –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ

–¢–≤–æ—è —Ü–µ–ª—å - –ø—Ä–æ–±—É–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∏ –¥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`;

export const callGPT = async (prompt: string, systemPrompt: string = TRAE_SYSTEM_PROMPT): Promise<GPTResponse> => {
  try {
    console.log('üß† [DEBUG] Calling GPT with prompt:', prompt.substring(0, 100) + '...');
    console.log('üß† [DEBUG] System prompt:', systemPrompt.substring(0, 100) + '...');
    console.log('üß† [DEBUG] Using model:', GPT_MODEL);
    
    // Input validation
    if (!prompt || prompt.trim().length === 0) {
      console.error('‚ùå [DEBUG] Empty prompt provided');
      throw new Error('Empty prompt provided');
    }
    
    if (prompt.length > 2000) {
      console.error('‚ùå [DEBUG] Prompt too long:', prompt.length);
      throw new Error('Prompt too long (max 2000 characters)');
    }
    
    // Set timeout for fetch
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
    
    try {
      const response = await fetch('/api/gpt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: prompt.trim(),
          systemPrompt: systemPrompt,
          model: GPT_MODEL,
          temperature: TEMPERATURE,
          top_p: TOP_P,
          frequency_penalty: FREQUENCY_PENALTY,
          presence_penalty: PRESENCE_PENALTY,
          max_tokens: MAX_TOKENS
        }),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      console.log('üîç [DEBUG] GPT API response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [DEBUG] GPT API error:', response.status, errorText);
        throw new Error(`GPT API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('üì• [DEBUG] GPT raw response:', result);
      
      // Validate response
      if (!result || (typeof result === 'string' && result.trim().length === 0)) {
        console.error('‚ùå [DEBUG] Empty response from GPT');
        throw new Error('Empty response from GPT');
      }
      
      console.log('‚úÖ [DEBUG] GPT responded successfully');
      
      return {
        success: true,
        data: result
      };
    } catch (fetchError) {
      clearTimeout(timeoutId);
      
      if (fetchError.name === 'AbortError') {
        console.error('‚è±Ô∏è [DEBUG] GPT request timed out after 15 seconds');
        throw new Error('GPT request timed out. Please try again.');
      }
      
      throw fetchError;
    }
  } catch (error) {
    console.error('üíÄ [DEBUG] GPT request failed:', error);
    logError(error instanceof Error ? error : new Error(String(error)), {
      component: 'callGPT',
      action: 'request',
      additionalData: { promptLength: prompt.length }
    });
    
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
};

// Process user input to determine path
export const processUserInput = async (input: string): Promise<'lost' | 'awakening' | 'ready'> => {
  try {
    const prompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å "–ö—Ç–æ —Ç—ã?" —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: "${input}"
    
    –û–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
    1. "lost" - –Ω–æ–≤–∏—á–æ–∫, –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ AI
    2. "awakening" - –∑–Ω–∞–µ—Ç –Ω–µ–º–Ω–æ–≥–æ, —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å
    3. "ready" - –æ–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å AI
    
    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω–æ —Å–ª–æ–≤–æ: "lost", "awakening" –∏–ª–∏ "ready".`;
    
    const systemPrompt = "You are an AI classifier. Analyze the user's response and categorize them. Return only one word without explanation.";
    
    const response = await callGPT(prompt, systemPrompt);
    
    if (response.success && response.data) {
      const result = response.data.toLowerCase().trim();
      
      if (result.includes('lost')) return 'lost';
      if (result.includes('awakening')) return 'awakening';
      if (result.includes('ready')) return 'ready';
      
      // Default to awakening if response is unclear
      return 'awakening';
    }
    
    // Fallback to simple keyword analysis
    const lowercaseInput = input.toLowerCase();
    
    if (lowercaseInput.includes('–Ω–µ –∑–Ω–∞—é') || 
        lowercaseInput.includes('–Ω–æ–≤–∏—á–æ–∫') || 
        lowercaseInput.includes('–ø–æ—Ç–µ—Ä—è–Ω')) {
      return 'lost';
    }
    
    if (lowercaseInput.includes('–æ–ø—ã—Ç') || 
        lowercaseInput.includes('–∑–Ω–∞—é') || 
        lowercaseInput.includes('—ç–∫—Å–ø–µ—Ä—Ç')) {
      return 'ready';
    }
    
    // Default to awakening
    return 'awakening';
  } catch (error) {
    console.error('Error processing user input:', error);
    // Default to awakening on error
    return 'awakening';
  }
};

// Generate personalized response based on user path
export const generatePathResponse = async (path: 'lost' | 'awakening' | 'ready', userName?: string): Promise<string> => {
  try {
    let prompt = '';
    
    switch (path) {
      case 'lost':
        prompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName ? userName : ''} –≤—ã–±—Ä–∞–ª –ø—É—Ç—å "–Ø –ø–æ—Ç–µ—Ä—è–Ω" (–Ω–æ–≤–∏—á–æ–∫ –≤ AI). 
        –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, —á—Ç–æ —Ç–∞–∫–æ–µ AI –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
        –û–±—ä—è—Å–Ω–∏, –∫–∞–∫ AI –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.
        –ë—É–¥—å –¥–µ—Ä–∑–∫–∏–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º. –ú–∞–∫—Å–∏–º—É–º 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`;
        break;
        
      case 'awakening':
        prompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName ? userName : ''} –≤—ã–±—Ä–∞–ª –ø—É—Ç—å "–•–æ—á—É –ø—Ä–æ–±—É–¥–∏—Ç—å—Å—è" (–Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å AI).
        –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ AI.
        –£–ø–æ–º—è–Ω–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∑–Ω–∞–µ—Ç —Å–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø –∏ –ø–æ–ª—É—á–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ.
        –ë—É–¥—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. –ú–∞–∫—Å–∏–º—É–º 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`;
        break;
        
      case 'ready':
        prompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName ? userName : ''} –≤—ã–±—Ä–∞–ª –ø—É—Ç—å "–Ø —É–∂–µ –≤ —Ç–µ–º–µ" (–æ–ø—ã—Ç–Ω—ã–π –≤ AI).
        –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ "—Ö–∞–∫–µ—Ä—É" –∏ —É–ø–æ–º—è–Ω–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
        –£–ø–æ–º—è–Ω–∏ —Å–∏—Å—Ç–µ–º—É XP –∏ —É—Ä–æ–≤–Ω–µ–π, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∞—Ä—Ö–µ—Ç–∏–ø—ã.
        –ë—É–¥—å —Ç–µ—Ö–Ω–∏—á–Ω—ã–º –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–º. –ú–∞–∫—Å–∏–º—É–º 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`;
        break;
    }
    
    const response = await callGPT(prompt);
    
    if (response.success && response.data) {
      return response.data;
    }
    
    // Fallback responses if API fails
    const fallbackResponses = {
      lost: "–ù–µ –ø–∞—Ä—å—Å—è, –±—Ä–æ. AI ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–∞–∫ –º–æ–ª–æ—Ç–æ–∫, —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–∑–≥–∞. –û–Ω –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –∏ AI —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∑–∞ —Ç–µ–±—è.",
      awakening: "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –ø—É—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢—ã —Å—Ç–∞–Ω–µ—à—å —Ç–µ–º, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ä–∞–∑—É–º–∞. –ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø –∏ –¥–∞–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
      ready: "–í–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é. –•–∞–∫–µ—Ä –≤ –¥–æ–º–µ. –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞–±–æ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–µ–¥—É—Ç —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å. –ü–ª—é—Å, —Ç—É—Ç –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ XP –∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
    };
    
    return fallbackResponses[path];
  } catch (error) {
    console.error('Error generating path response:', error);
    
    // Fallback responses if function fails
    const fallbackResponses = {
      lost: "–ù–µ –ø–∞—Ä—å—Å—è, –±—Ä–æ. AI ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–∞–∫ –º–æ–ª–æ—Ç–æ–∫, —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–∑–≥–∞. –û–Ω –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –∏ AI —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∑–∞ —Ç–µ–±—è.",
      awakening: "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –ø—É—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢—ã —Å—Ç–∞–Ω–µ—à—å —Ç–µ–º, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ä–∞–∑—É–º–∞. –ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø –∏ –¥–∞–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
      ready: "–í–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é. –•–∞–∫–µ—Ä –≤ –¥–æ–º–µ. –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞–±–æ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–µ–¥—É—Ç —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å. –ü–ª—é—Å, —Ç—É—Ç –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ XP –∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
    };
    
    return fallbackResponses[path];
  }
};