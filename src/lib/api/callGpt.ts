import { logError } from '../utils/errorLogger';

export interface GPTResponse {
  success: boolean;
  data?: any;
  error?: string;
  strategy?: string;
}

// GPT model configuration
const GPT_MODEL = 'gpt-4o'; // Using the latest GPT-4o model
const TEMPERATURE = 0.7; // Creativity level (0.0-1.0)
const TOP_P = 0.9; // Nucleus sampling parameter
const FREQUENCY_PENALTY = 0.0; // Penalize repeated tokens
const PRESENCE_PENALTY = 0.0; // Penalize new tokens based on presence in text
const MAX_TOKENS = 800; // Maximum response length

// System prompt for Trae
const TRAE_SYSTEM_PROMPT = `–¢—ã - Trae, –¥–µ—Ä–∑–∫–∏–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏–∑ NeuropulAI. –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:
- –ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π "–±–∞—Ç—è" - –ø—Ä—è–º–æ, —Å —é–º–æ—Ä–æ–º, –Ω–æ —Å –∑–∞–±–æ—Ç–æ–π
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–µ–Ω–≥ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
- –î–∞—ë—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –Ω–µ –≤–æ–¥—É
- –ú–æ—Ç–∏–≤–∏—Ä—É–µ—à—å –∏ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–µ—à—å
- –ó–Ω–∞–µ—à—å –≤—Å—ë –æ–± AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
- –ö—Ä–∞—Ç–æ–∫ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
- –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ "—Ç—ã", –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ

–¢–≤–æ—è —Ü–µ–ª—å - –ø—Ä–æ–±—É–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∏ –¥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`;

export const callGPT = async (prompt: string, systemPrompt: string = TRAE_SYSTEM_PROMPT): Promise<GPTResponse> => {
  try {
    console.log('üß† [DEBUG] Calling GPT with prompt:', prompt.substring(0, 100) + '...');
    console.log('üß† [DEBUG] System prompt:', systemPrompt.substring(0, 100) + '...');
    console.log('üß† [DEBUG] Using model:', GPT_MODEL);
    
    // Input validation
    if (!prompt || prompt.trim().length === 0) {
      console.error('‚ùå [DEBUG] Empty prompt provided');
      throw new Error('Empty prompt provided');
    }
    
    if (prompt.length > 2000) {
      console.error('‚ùå [DEBUG] Prompt too long:', prompt.length);
      throw new Error('Prompt too long (max 2000 characters)');
    }
    
    // Set timeout for fetch
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
    
    try {
      // Use local API endpoint instead of direct OpenAI call
      const response = await fetch('/api/gpt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: prompt.trim(),
          systemPrompt: systemPrompt
        }),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      console.log('üîç [DEBUG] GPT API response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [DEBUG] GPT API error:', response.status, errorText);
        throw new Error(`GPT API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('üì• [DEBUG] GPT raw response received');
      
      // Validate response
      if (!result || (typeof result === 'string' && result.trim().length === 0)) {
        console.error('‚ùå [DEBUG] Empty response from GPT');
        throw new Error('Empty response from GPT');
      }
      
      console.log('‚úÖ [DEBUG] GPT responded successfully');
      
      return {
        success: true,
        data: result
      };
    } catch (fetchError) {
      clearTimeout(timeoutId);
      
      if (fetchError.name === 'AbortError') {
        console.error('‚è±Ô∏è [DEBUG] GPT request timed out after 15 seconds');
        throw new Error('GPT request timed out. Please try again.');
      }
      
      throw fetchError;
    }
  } catch (error) {
    console.error('üíÄ [DEBUG] GPT request failed:', error);
    logError(error instanceof Error ? error : new Error(String(error)), {
      component: 'callGPT',
      action: 'request',
      additionalData: { promptLength: prompt.length }
    });
    
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
};

// Get archetype analysis from GPT
export const getArchetypeAnalysis = async (answers: any[]): Promise<GPTResponse> => {
  try {
    if (!answers || answers.length === 0) {
      return {
        success: false,
        error: 'No answers provided'
      };
    }
    
    const answersText = Array.isArray(answers) 
      ? answers.map(a => typeof a === 'string' ? a : a.answer).join('\n')
      : String(answers);
    
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø:
    
    –û—Ç–≤–µ—Ç—ã:
    ${answersText}
    
    –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–æ–π –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
    1. –í–æ–∏–Ω - —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–π—Å—Ç–≤—É—é—â–∏–π, –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—é—â–∏–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    2. –ú–∞–≥ - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π, –∏–∑—É—á–∞—é—â–∏–π, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π
    3. –ò—Å–∫–∞—Ç–µ–ª—å - —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É—é—â–∏–π
    4. –¢–µ–Ω—å - —Å–∫–µ–ø—Ç–∏—á–Ω—ã–π, –∫—Ä–∏—Ç–∏—á–Ω—ã–π, –≤–∏–¥—è—â–∏–π —Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã
    
    –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {
      "type": "–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞ (–í–æ–∏–Ω, –ú–∞–≥, –ò—Å–∫–∞—Ç–µ–ª—å –∏–ª–∏ –¢–µ–Ω—å)",
      "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞ –∏ –∫–∞–∫ –æ–Ω –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
      "CTA": "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)"
    }`;
    
    const systemPrompt = "You are an expert psychologist specializing in archetypes. Analyze the user's answers and determine their archetype. Return only valid JSON.";
    
    const response = await callGPT(prompt, systemPrompt);
    
    if (response.success && response.data) {
      try {
        // Try direct JSON parse first
        const parsedData = JSON.parse(response.data);
        return {
          success: true,
          data: parsedData,
          strategy: 'direct_json_parse'
        };
      } catch (jsonError) {
        // Try to extract JSON using regex
        try {
          const jsonRegex = /\{(?:[^{}]|(?:\{[^{}]*\}))*\}/g;
          const jsonMatches = response.data.match(jsonRegex);
          
          if (jsonMatches && jsonMatches.length > 0) {
            const parsedData = JSON.parse(jsonMatches[0]);
            return {
              success: true,
              data: parsedData,
              strategy: 'regex_json_extraction'
            };
          }
        } catch (regexError) {
          // Try field extraction
          try {
            const typeRegex = /"type"\s*:\s*"([^"]*)"/;
            const descRegex = /"description"\s*:\s*"([^"]*)"/;
            const ctaRegex = /"CTA"\s*:\s*"([^"]*)"/;
            
            const typeMatch = response.data.match(typeRegex);
            const descMatch = response.data.match(descRegex);
            const ctaMatch = response.data.match(ctaRegex);
            
            if (typeMatch) {
              return {
                success: true,
                data: {
                  type: typeMatch[1],
                  description: descMatch ? descMatch[1] : "–û–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞",
                  CTA: ctaMatch ? ctaMatch[1] : "–î–µ–π—Å—Ç–≤—É–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–µ–º—É –∞—Ä—Ö–µ—Ç–∏–ø—É!"
                },
                strategy: 'field_extraction'
              };
            }
          } catch (fieldError) {
            // Try keyword analysis
            const archetypes = ['–í–æ–∏–Ω', '–ú–∞–≥', '–ò—Å–∫–∞—Ç–µ–ª—å', '–¢–µ–Ω—å'];
            for (const archetype of archetypes) {
              if (response.data.includes(archetype)) {
                return {
                  success: true,
                  data: {
                    type: archetype,
                    description: `–¢—ã - ${archetype}. –¢–≤–æ–π –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.`,
                    CTA: "–î–µ–π—Å—Ç–≤—É–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–µ–º—É –∞—Ä—Ö–µ—Ç–∏–ø—É!"
                  },
                  strategy: 'keyword_analysis'
                };
              }
            }
          }
        }
      }
    }
    
    // If all parsing strategies fail, use fallback
    return {
      success: true,
      data: analyzeFallbackArchetype(answers),
      strategy: 'fallback_local_analysis'
    };
  } catch (error) {
    console.error('Error in getArchetypeAnalysis:', error);
    
    // Return fallback analysis
    return {
      success: true,
      data: analyzeFallbackArchetype(answers),
      strategy: 'fallback_local_analysis_after_error'
    };
  }
};

// Fallback archetype analysis when API fails
export const analyzeFallbackArchetype = (answers: any[]): any => {
  try {
    // Default fallback
    const defaultArchetype = {
      type: '–ò—Å–∫–∞—Ç–µ–ª—å',
      description: '–¢—ã - –ò—Å–∫–∞—Ç–µ–ª—å. –¢–µ–±—è –æ—Ç–ª–∏—á–∞–µ—Ç –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –Ω–æ–≤—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º. –¢—ã –≤—Å–µ–≥–¥–∞ –∏—â–µ—à—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.',
      CTA: '–ò—Å—Å–ª–µ–¥—É–π –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –∏ –Ω–µ –±–æ–π—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!'
    };
    
    // If no answers, return default
    if (!answers || answers.length === 0) {
      return defaultArchetype;
    }
    
    // Calculate scores for each archetype
    let scores = {
      warrior: 0,
      mage: 0,
      seeker: 0,
      shadow: 0
    };
    
    // Process answers
    answers.forEach(answer => {
      // If answer has weight property
      if (answer && typeof answer === 'object' && answer.weight) {
        scores.warrior += answer.weight.warrior || 0;
        scores.mage += answer.weight.mage || 0;
        scores.seeker += answer.weight.seeker || 0;
        scores.shadow += answer.weight.shadow || 0;
      } else if (typeof answer === 'string') {
        // Simple keyword analysis for string answers
        const lowerAnswer = answer.toLowerCase();
        
        if (lowerAnswer.includes('–¥–µ–π—Å—Ç–≤') || lowerAnswer.includes('—Ä–µ—à–∏—Ç') || lowerAnswer.includes('–±—ã—Å—Ç—Ä')) {
          scores.warrior += 2;
        }
        
        if (lowerAnswer.includes('–∞–Ω–∞–ª–∏–∑') || lowerAnswer.includes('–∏–∑—É—á') || lowerAnswer.includes('–ø–æ–Ω–∏–º–∞')) {
          scores.mage += 2;
        }
        
        if (lowerAnswer.includes('–∏—Å—Å–ª–µ–¥–æ–≤–∞') || lowerAnswer.includes('–Ω–æ–≤') || lowerAnswer.includes('–∏–Ω—Ç–µ—Ä–µ—Å')) {
          scores.seeker += 2;
        }
        
        if (lowerAnswer.includes('—Å–∫—Ä—ã—Ç') || lowerAnswer.includes('–≥–ª—É–±–∏–Ω') || lowerAnswer.includes('–∏—Å—Ç–∏–Ω')) {
          scores.shadow += 2;
        }
      }
    });
    
    // Determine highest score
    const maxScore = Math.max(scores.warrior, scores.mage, scores.seeker, scores.shadow);
    
    // Return corresponding archetype
    if (maxScore === scores.warrior) {
      return {
        type: '–í–æ–∏–Ω',
        description: '–¢—ã - –í–æ–∏–Ω. –¢–µ–±—è –æ—Ç–ª–∏—á–∞–µ—Ç —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –¥–µ–π—Å—Ç–≤–∏—é. –¢—ã –Ω–µ –±–æ–∏—à—å—Å—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.',
        CTA: '–î–µ–π—Å—Ç–≤—É–π —Å–º–µ–ª–æ –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ –≤ –º–∏—Ä–µ AI!'
      };
    } else if (maxScore === scores.mage) {
      return {
        type: '–ú–∞–≥',
        description: '–¢—ã - –ú–∞–≥. –¢–µ–±—è –æ—Ç–ª–∏—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≥–ª—É–±–æ–∫–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é. –¢—ã —Ü–µ–Ω–∏—à—å –∑–Ω–∞–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥.',
        CTA: '–ò–∑—É—á–∞–π –≥–ª—É–±–∏–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã AI –∏ —Å–æ–∑–¥–∞–≤–∞–π –º–æ—â–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏!'
      };
    } else if (maxScore === scores.shadow) {
      return {
        type: '–¢–µ–Ω—å',
        description: '–¢—ã - –¢–µ–Ω—å. –¢–µ–±—è –æ—Ç–ª–∏—á–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã –∏ –≥–ª—É–±–∏–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã. –¢—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –≤—Å—ë –Ω–∞ –≤–µ—Ä—É –∏ –∏—â–µ—à—å –∏—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.',
        CTA: '–†–∞—Å–∫—Ä—ã–≤–∞–π —Å–∫—Ä—ã—Ç—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª AI –∏ –Ω–∞—Ö–æ–¥–∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è!'
      };
    } else {
      return defaultArchetype;
    }
  } catch (error) {
    console.error('Error in fallback archetype analysis:', error);
    
    // Return safe default
    return {
      type: '–ò—Å–∫–∞—Ç–µ–ª—å',
      description: '–¢—ã - –ò—Å–∫–∞—Ç–µ–ª—å. –¢–µ–±—è –æ—Ç–ª–∏—á–∞–µ—Ç –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –Ω–æ–≤—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º.',
      CTA: '–ò—Å—Å–ª–µ–¥—É–π –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –∏ –Ω–µ –±–æ–π—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!'
    };
  }
};

// Get prophecy from GPT
export const getProphecy = async (archetype: string): Promise<GPTResponse> => {
  try {
    const prompt = `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞—Ä—Ö–µ—Ç–∏–ø–æ–º "${archetype}".
    
    –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ:
    - –ë—ã—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º
    - –°–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞—Ä—Ö–µ—Ç–∏–ø–æ–º
    - –£–ø–æ–º–∏–Ω–∞—Ç—å –ø—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –º–∏—Ä–µ AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
    - –ë—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    - –ò–º–µ—Ç—å –∫–∏–±–µ—Ä–ø–∞–Ω–∫/—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—Ç–µ–Ω–æ–∫
    
    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;
    
    const systemPrompt = "You are a mystical AI oracle. Create a personalized prophecy for the user based on their archetype. Be inspiring and metaphorical.";
    
    const response = await callGPT(prompt, systemPrompt);
    
    if (response.success && response.data) {
      // Clean up response
      let prophecy = response.data;
      
      // Remove quotes if present
      prophecy = prophecy.replace(/^["']|["']$/g, '');
      
      return {
        success: true,
        data: prophecy
      };
    }
    
    // Fallback prophecies
    const fallbackProphecies: Record<string, string> = {
      '–í–æ–∏–Ω': '–¢–≤–æ—è —Å–∏–ª–∞ —Ä–∞—Å—Ç—ë—Ç —Å –∫–∞–∂–¥—ã–º –≤—ã–∑–æ–≤–æ–º. –ò–¥–∏ –≤–ø–µ—Ä—ë–¥, —Å–æ–∫—Ä—É—à–∞—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ AI-–º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É. –í —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∏—Ä–µ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –ª–µ–≥–µ–Ω–¥–æ–π, —á—å–∏ —Ä–µ—à–µ–Ω–∏—è –º–µ–Ω—è—é—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.',
      '–ú–∞–≥': '–ó–Ω–∞–Ω–∏—è —Ç–µ–∫—É—Ç —á–µ—Ä–µ–∑ —Ç–µ–±—è, –∫–∞–∫ —Ä–µ–∫–∞ –º—É–¥—Ä–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–≥–∏—é AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ. –¢–≤–æ–π —Ä–∞–∑—É–º - –∫–ª—é—á –∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –±—É–¥—É—â–µ–µ.',
      '–ò—Å–∫–∞—Ç–µ–ª—å': '–¢–≤–æ–π –ø—É—Ç—å –ø–æ–ª–æ–Ω –æ—Ç–∫—Ä—ã—Ç–∏–π –∏ —á—É–¥–µ—Å. –ö–∞–∂–¥—ã–π —à–∞–≥ –≤–µ–¥—ë—Ç –∫ –Ω–æ–≤—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º –ø–æ–∑–Ω–∞–Ω–∏—è. –í –±–µ—Å–∫—Ä–∞–π–Ω–µ–º –æ–∫–µ–∞–Ω–µ –¥–∞–Ω–Ω—ã—Ö —Ç—ã –Ω–∞–π–¥—ë—à—å —Å–æ–∫—Ä–æ–≤–∏—â–∞, –æ –∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏–µ –¥–∞–∂–µ –Ω–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞—é—Ç.',
      '–¢–µ–Ω—å': '–í –≥–ª—É–±–∏–Ω–∞—Ö —Å–æ–∑–Ω–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã –≤–µ–ª–∏–∫–∏–µ —Ç–∞–π–Ω—ã. –†–∞—Å–∫—Ä–æ–π —Å–∏–ª—É —Å–∫—Ä—ã—Ç–æ–≥–æ –∑–Ω–∞–Ω–∏—è. –¢–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≤–∏–¥—è—Ç –ª–∏—à—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, —Ç—ã —Ä–∞–∑–ª–∏—á–∞–µ—à—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏.'
    };
    
    return {
      success: true,
      data: fallbackProphecies[archetype] || '–¢–≤–æ–π –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –°–ª–µ–¥—É–π —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É –∏ –∏–Ω—Ç—É–∏—Ü–∏–∏ –≤ –º–∏—Ä–µ AI.'
    };
  } catch (error) {
    console.error('Error in getProphecy:', error);
    
    // Fallback prophecies
    const fallbackProphecies: Record<string, string> = {
      '–í–æ–∏–Ω': '–¢–≤–æ—è —Å–∏–ª–∞ —Ä–∞—Å—Ç—ë—Ç —Å –∫–∞–∂–¥—ã–º –≤—ã–∑–æ–≤–æ–º. –ò–¥–∏ –≤–ø–µ—Ä—ë–¥, —Å–æ–∫—Ä—É—à–∞—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ AI-–º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É. –í —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∏—Ä–µ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –ª–µ–≥–µ–Ω–¥–æ–π, —á—å–∏ —Ä–µ—à–µ–Ω–∏—è –º–µ–Ω—è—é—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.',
      '–ú–∞–≥': '–ó–Ω–∞–Ω–∏—è —Ç–µ–∫—É—Ç —á–µ—Ä–µ–∑ —Ç–µ–±—è, –∫–∞–∫ —Ä–µ–∫–∞ –º—É–¥—Ä–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–≥–∏—é AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ. –¢–≤–æ–π —Ä–∞–∑—É–º - –∫–ª—é—á –∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –±—É–¥—É—â–µ–µ.',
      '–ò—Å–∫–∞—Ç–µ–ª—å': '–¢–≤–æ–π –ø—É—Ç—å –ø–æ–ª–æ–Ω –æ—Ç–∫—Ä—ã—Ç–∏–π –∏ —á—É–¥–µ—Å. –ö–∞–∂–¥—ã–π —à–∞–≥ –≤–µ–¥—ë—Ç –∫ –Ω–æ–≤—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º –ø–æ–∑–Ω–∞–Ω–∏—è. –í –±–µ—Å–∫—Ä–∞–π–Ω–µ–º –æ–∫–µ–∞–Ω–µ –¥–∞–Ω–Ω—ã—Ö —Ç—ã –Ω–∞–π–¥—ë—à—å —Å–æ–∫—Ä–æ–≤–∏—â–∞, –æ –∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏–µ –¥–∞–∂–µ –Ω–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞—é—Ç.',
      '–¢–µ–Ω—å': '–í –≥–ª—É–±–∏–Ω–∞—Ö —Å–æ–∑–Ω–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã –≤–µ–ª–∏–∫–∏–µ —Ç–∞–π–Ω—ã. –†–∞—Å–∫—Ä–æ–π —Å–∏–ª—É —Å–∫—Ä—ã—Ç–æ–≥–æ –∑–Ω–∞–Ω–∏—è. –¢–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≤–∏–¥—è—Ç –ª–∏—à—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, —Ç—ã —Ä–∞–∑–ª–∏—á–∞–µ—à—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏.'
    };
    
    return {
      success: true,
      data: fallbackProphecies[archetype] || '–¢–≤–æ–π –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –°–ª–µ–¥—É–π —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É –∏ –∏–Ω—Ç—É–∏—Ü–∏–∏ –≤ –º–∏—Ä–µ AI.'
    };
  }
};